// ATTENTION:
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

import { WebContext, validateId, validateBody } from '../../shared/api-server';
import { MyError } from '../../shared/error';
import { getRecords, addRecord, getRecord, updateRecord, deleteRecord, getAccounts } from './default';

export async function dispatch(ctx: WebContext): Promise<void> {
    let match: RegExpExecArray;
    if (!ctx.path.startsWith('/wimm/v1')) { throw new MyError('not-found', 'invalid invocation version'); }
    const methodPath = `${ctx.method} ${ctx.path.slice(8)}`;

    match = /^GET \/records$/.exec(methodPath); if (match) {
        ctx.body = await getRecords(ctx.state);
        return;
    }
    match = /^POST \/records$/.exec(methodPath); if (match) {
        ctx.body = await addRecord(ctx.state, validateBody(ctx.request.body));
        ctx.status = 201;
        return;
    }
    match = /^GET \/records\/(?<recordId>\d+)$/.exec(methodPath); if (match) {
        ctx.body = await getRecord(ctx.state, validateId('recordId', match.groups['recordId']));
        return;
    }
    match = /^PUT \/records\/(?<recordId>\d+)$/.exec(methodPath); if (match) {
        ctx.body = await updateRecord(ctx.state, validateId('recordId', match.groups['recordId']), validateBody(ctx.request.body));
        return;
    }
    match = /^DELETE \/records\/(?<recordId>\d+)$/.exec(methodPath); if (match) {
        await deleteRecord(ctx.state, validateId('recordId', match.groups['recordId']));
        ctx.status = 204;
        return;
    }
    match = /^GET \/accounts$/.exec(methodPath); if (match) {
        ctx.body = await getAccounts(ctx.state);
        return;
    }

    throw new MyError('not-found', 'invalid invocation');
}
